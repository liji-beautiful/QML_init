import os
import multiprocessing
from vqc import ansatz_circuit,single_data_output,vqc_stim
import random
import psutil
from dataprocess import self_make_data
import csv
import math
import numpy as np
import hypermapper
import json
from train_func import *

from timeit import default_timer as timer
def generate_random_list(params_num):
    return [random.choice([0, 1.570796327, 3.141592654, -1.570796327]) for _ in range(params_num)]

def parallel_sample(index,sample_num,data_train,target_train,qubit_num,sample_file=None):
    pid = os.getpid()
    
    process = psutil.Process(pid)
    process.cpu_affinity([index])
    #current_cpu = process.cpu_num()
    print(f"Process {pid} is using CPU cores: {index}")
    _,params_num=ansatz_circuit(qubit_num)
    sample_file = f"{sample_file}resume_{index}.csv"
    head_csv=[f"x{i}" for i in range(params_num)]+["value","Timestamp"]
    with open(sample_file, 'a') as file:
        writer = csv.writer(file)
        writer.writerow(head_csv)
    for j in range(sample_num):
        random_list = generate_random_list(params_num)
        print(random_list)
        loss=0
        for i in range(len(data_train)):
            x=np.copy(data_train[i])
            loss+=single_data_output(x,target_train[i],random_list,qubit_num)
        end=timer()
        with open(sample_file, 'a') as file:
            writer = csv.writer(file)
            record_list=random_list+[loss/len(data_train),end]
            writer.writerow(record_list)
    
    
def parallel_sample_hm(index,sample_num,data_train,target_train,observable,params,qubit_num,rep,sample_file=None):
    pid = os.getpid()
    
    process = psutil.Process(pid)
    process.cpu_affinity([index])
    #current_cpu = process.cpu_num()
    print(f"Process {pid} is using CPU cores: {index}")
    _,params_num=ansatz_circuit(qubit_num,rep)
    
    sample_file = f"{sample_file}resume_{index}.csv"
    data_train_,target_train_,feature_num,data_test,target_test=self_make_data()
    if qubit_num==0:
        qubit_num=feature_num
    #data_train,_=conversion_of_number_systems(eps,object_base,clifford_group)
    #print(qubit_num)
    _,params_num=ansatz_circuit(qubit_num)
    hypermapper_config_path =sample_file+ f"hypermapper_config_{index}.json"
    config = {}
    config["application_name"] = "vqc_init"
    config["optimization_objectives"] = ["value"]
    config["optimization_iterations"] = 500
    config["models"] = {}
    config["models"]["model"] = "random_forest"
    config["input_parameters"] = {}
    config["print_best"] = False
    config["number_of_cpus"]= 1
    config["print_posterior_best"] = False
    config["design_of_experiment"]={}
    config["design_of_experiment"]["doe_type"]="random sampling"
    config["design_of_experiment"]["number_of_samples"]=sample_num
    for i in range(params_num):
        x = {}
        x["parameter_type"] = "ordinal"
        x["values"] = [0, 1.570796327, 3.141592654, -1.570796327]
        x["parameter_default"] = random.choice([0, 1.570796327, 3.141592654, -1.570796327])
        config["input_parameters"]["x" + str(i)] = x
    config["log_file"] =sample_file+f'hypermapper_log_{index}.log'
    config["output_data_file"] =sample_file+ f"hypermapper_output_{index}.csv"

    with open(hypermapper_config_path, "w") as config_file:
        json.dump(config, config_file, indent=4)
        
    loss_file=sample_file+f'loss_file_{index}.csv'
    hypermapper.optimizer.optimize(
        hypermapper_config_path, 
        lambda x: vqc_stim(
            guess_param=x,
            data_train=data_train,
            target_train=target_train,
            qubit_num=qubit_num,
            ansatz_reps=rep,
            loss_file=loss_file,
            observable=observable,
            params=params
                           )
    )


if __name__ == '__main__':
    
    data_train,target_train,feature_num,data_test,target_test=self_make_data(n_samples=1,n_features=10,n_classes=2,n_train=1)
    number_of_cpus=10
    processes = []
    qubit_num=len(data_train[0])
    total_range = 4**qubit_num
    sample_size = 1000

    # If the range is too large, you can split the process into manageable chunks
    #chunk_size = int(1e6)  # Adjust based on memory constraints
    #sampled_numbers = []

    #while len(sampled_numbers) < sample_size:
    #    chunk_start = random.randint(0, total_range - chunk_size)
    #    chunk = range(chunk_start, min(chunk_start + chunk_size, total_range))
    #    sampled_numbers.extend(random.sample(list(chunk), min(sample_size - len(sampled_numbers), chunk_size)))

    #observable=generate_observables_list(qubit_num,sampled_numbers)
    #print(observable)
    #params = np.random.rand(len(observable))
    #params = params / np.linalg.norm(params)
    #print(params)
    params,observable=([np.float64(-3.5694386467346275),
  np.float64(0.050570368838473635),
  np.float64(0.027425067728574816),
  np.float64(0.045128750256257386),
  np.float64(-0.0051683338266191575),
  np.float64(-2.1133612027046657e-08),
  np.float64(0.0051683251712111005),
  np.float64(0.034722494542830364),
  np.float64(0.04512846821144277),
  np.float64(0.027425293678224202),
  np.float64(-0.005638176175507453),
  np.float64(-0.0036734399311859713),
  np.float64(-0.009311616106693427),
  np.float64(0.005168243966320993),
  np.float64(-0.005168351996037364),
  np.float64(1.0802971637038914e-07),
  np.float64(-0.027425218451803884),
  np.float64(0.033059617794881604),
  np.float64(-2.1133612027046657e-08),
  np.float64(-0.0051683251712111005),
  np.float64(0.0051683338266191575),
  np.float64(0.03389832441796735),
  np.float64(0.0347421136735698),
  np.float64(0.031095009499649825),
  np.float64(0.009307638184457243),
  np.float64(-0.0073408718096297),
  np.float64(0.0052177875780748),
  np.float64(0.0052177875780748),
  np.float64(0.009307479851932986),
  np.float64(-2.924621741312582e-08),
  np.float64(1.3903756871002517e-08),
  np.float64(5.2361096787838916e-08),
  np.float64(0.007340598999171961),
  np.float64(0.001966880852761025),
  np.float64(-0.005217755105703855),
  np.float64(0.005217765421204284),
  np.float64(0.0073408718096297),
  np.float64(-0.009307638184457243),
  np.float64(1.1603019872252064e-07),
  np.float64(1.1603019872252064e-07),
  np.float64(-0.0019667663748275423),
  np.float64(-0.005217671547876076),
  np.float64(0.005217671547876076),
  np.float64(-0.001966880852761025),
  np.float64(-1.3903756871002517e-08),
  np.float64(-5.2361096787838916e-08),
  np.float64(2.924621741312582e-08),
  np.float64(-0.009307479851932986),
  np.float64(0.005217765421204284),
  np.float64(-0.005217755105703855),
  np.float64(-0.007340598999171961),
  np.float64(0.0019667663748275423),
  np.float64(-0.02808082032435199),
  np.float64(-0.0367308351450732),
  np.float64(-0.03478863175920223),
  np.float64(-3.003193542808201e-08),
  np.float64(-5.02359547975041e-08),
  np.float64(0.03481596137988931),
  np.float64(-0.034788589732858505),
  np.float64(-0.005638176175507453),
  np.float64(0.005168351996037364),
  np.float64(-1.0802971637038914e-07),
  np.float64(0.005168243966320993),
  np.float64(-0.0036734399311859713),
  np.float64(-0.009311616106693427),
  np.float64(0.033898031735096076),
  np.float64(0.03474215546091709),
  np.float64(0.03305978974248493),
  np.float64(-5.02359547975041e-08),
  np.float64(-3.003193542808201e-08),
  np.float64(-0.02742545438521495),
  np.float64(0.031095013818070172),
  np.float64(0.031186341310758807),
  np.float64(-0.031186341310758807),
  np.float64(0.022236396839375918),
  np.float64(-0.022236387241124086),
  np.float64(0.022236396839375918),
  np.float64(0.03171364022926996),
  np.float64(0.03171364022926996),
  np.float64(-0.022236387241124086),
  np.float64(-0.050570368838473635),
  np.float64(-0.058443671109144446),
  np.float64(-0.05861140903933363),
  np.float64(2.3107121953315133e-07),
  np.float64(-0.05861109015258247),
  np.float64(2.3107121953315133e-07),
  np.float64(-0.05896055479749102),
  np.float64(2.3190126375964562e-07),
  np.float64(-2.3190126375964562e-07),
  np.float64(0.05914337855099058),
  np.float64(-0.058960891154479604),
  np.float64(0.012029770093969449),
  np.float64(-0.012029770093969449),
  np.float64(-0.012178107864266038),
  np.float64(-0.017068035245086727),
  np.float64(0.017173239583760026),
  np.float64(-0.017173239583760026),
  np.float64(-0.017068035245086727),
  np.float64(0.012178107864266038),
  np.float64(0.03118579647435827),
  np.float64(-0.02223667050869074),
  np.float64(0.03118579647435827),
  np.float64(0.02223627921140772),
  np.float64(0.02223667050869074),
  np.float64(-2.8426236054748453e-07),
  np.float64(0.03171306136221534),
  np.float64(2.8426236054748453e-07),
  np.float64(-0.03171306136221534),
  np.float64(0.02223627921140772),
  np.float64(-0.027425067728574816),
  np.float64(0.031186341310758807),
  np.float64(-0.031186341310758807),
  np.float64(0.022236396839375918),
  np.float64(-0.022236387241124086),
  np.float64(0.022236396839375918),
  np.float64(0.03171364022926996),
  np.float64(0.03171364022926996),
  np.float64(-0.022236387241124086),
  np.float64(0.045128750256257386),
  np.float64(0.05861140903933363),
  np.float64(0.07081237975774284),
  np.float64(-0.01706807166816482),
  np.float64(0.04675226463679981),
  np.float64(-0.01706807166816482),
  np.float64(0.04696089918263089),
  np.float64(-0.01717326882997744),
  np.float64(0.01717326882997744),
  np.float64(-0.05932611847690525),
  np.float64(0.07131767853025152),
  np.float64(-0.02223667050869074),
  np.float64(0.03825841681871474),
  np.float64(-0.02223667050869074),
  np.float64(0.006539931688758583),
  np.float64(-0.03825841681871474),
  np.float64(-0.022405581510282355),
  np.float64(-0.022623578763714555),
  np.float64(0.022405581510282355),
  np.float64(0.022623578763714555),
  np.float64(0.006539931688758583),
  np.float64(-0.0051683338266191575),
  np.float64(-2.1133612026396145e-08),
  np.float64(-2.3107121953315133e-07),
  np.float64(-0.01706807166816482),
  np.float64(0.024218441123921224),
  np.float64(0.017068336682071587),
  np.float64(0.024218441123921224),
  np.float64(0.017285506352933456),
  np.float64(0.024372462363043378),
  np.float64(-0.024372462363043378),
  np.float64(2.6020666785142577e-07),
  np.float64(-0.017285270503952125),
  np.float64(0.022236396839375918),
  np.float64(-0.022236396839375918),
  np.float64(0.015865889682981072),
  np.float64(-0.015851547795452007),
  np.float64(0.015865889682981072),
  np.float64(0.022623339148893747),
  np.float64(0.022623339148893747),
  np.float64(-0.015851547795452007),
  np.float64(0.0051683251712111005),
  np.float64(0.034722494542830364),
  np.float64(-0.03118579647435827),
  np.float64(0.02223667050869074),
  np.float64(-0.03118579647435827),
  np.float64(-0.02223627921140772),
  np.float64(-0.02223667050869074),
  np.float64(2.8426236054748453e-07),
  np.float64(-0.03171306136221534),
  np.float64(-2.8426236054748453e-07),
  np.float64(0.03171306136221534),
  np.float64(-0.02223627921140772),
  np.float64(-0.012029770093969449),
  np.float64(0.012029770093969449),
  np.float64(0.012178107864266038),
  np.float64(0.017068035245086727),
  np.float64(-0.017173239583760026),
  np.float64(0.017173239583760026),
  np.float64(0.017068035245086727),
  np.float64(-0.012178107864266038),
  np.float64(0.04512846821144277),
  np.float64(0.05861109015258247),
  np.float64(0.04675226463679981),
  np.float64(0.017068336682071587),
  np.float64(0.07081276730362536),
  np.float64(0.017068336682071587),
  np.float64(0.07131803461359634),
  np.float64(0.017173536712887738),
  np.float64(-0.017173536712887738),
  np.float64(-0.05932575952364629),
  np.float64(0.0469608905364302),
  np.float64(-0.027425293678224202),
  np.float64(-0.012178107864266038),
  np.float64(0.012178107864266038),
  np.float64(0.012347802877244874),
  np.float64(0.0172852404720167),
  np.float64(-0.017405551570818956),
  np.float64(0.017405551570818956),
  np.float64(0.0172852404720167),
  np.float64(-0.012347802877244874),
  np.float64(-0.005638176175507453),
  np.float64(-0.0036734399311859713),
  np.float64(-0.009311616106693427),
  np.float64(0.005168243966320993),
  np.float64(-0.017068035245086727),
  np.float64(0.017068035245086727),
  np.float64(0.0172852404720167),
  np.float64(0.024218735693562515),
  np.float64(-0.024372768419640253),
  np.float64(0.024372768419640253),
  np.float64(0.024218735693562515),
  np.float64(-0.0172852404720167),
  np.float64(0.02223627921140772),
  np.float64(0.006539931688758583),
  np.float64(0.02223627921140772),
  np.float64(0.038257888787766606),
  np.float64(-0.006539931688758583),
  np.float64(-0.02240600204481271),
  np.float64(0.02262322311869503),
  np.float64(0.02240600204481271),
  np.float64(-0.02262322311869503),
  np.float64(0.038257888787766606),
  np.float64(-0.022236387241124086),
  np.float64(0.022236387241124086),
  np.float64(-0.015851547795452007),
  np.float64(0.01586587671836003),
  np.float64(-0.015851547795452007),
  np.float64(-0.022623330424941593),
  np.float64(-0.022623330424941593),
  np.float64(0.01586587671836003),
  np.float64(-0.005168351996037364),
  np.float64(-1.0802971637038914e-07),
  np.float64(0.027425218451803884),
  np.float64(0.033059617794881604),
  np.float64(2.1133612026396145e-08),
  np.float64(2.3107121953315133e-07),
  np.float64(0.01706807166816482),
  np.float64(-0.024218441123921224),
  np.float64(-0.017068336682071587),
  np.float64(-0.024218441123921224),
  np.float64(-0.017285506352933456),
  np.float64(-0.024372462363043378),
  np.float64(0.024372462363043378),
  np.float64(-2.6020666785142577e-07),
  np.float64(0.017285270503952125),
  np.float64(0.022236396839375918),
  np.float64(-0.022236396839375918),
  np.float64(0.015865889682981072),
  np.float64(-0.015851547795452007),
  np.float64(0.015865889682981072),
  np.float64(0.022623339148893747),
  np.float64(0.022623339148893747),
  np.float64(-0.015851547795452007),
  np.float64(0.0051683251712111005),
  np.float64(0.02223667050869074),
  np.float64(-0.03825841681871474),
  np.float64(0.02223667050869074),
  np.float64(-0.006539931688758583),
  np.float64(0.03825841681871474),
  np.float64(0.022405581510282355),
  np.float64(0.022623578763714555),
  np.float64(-0.022405581510282355),
  np.float64(-0.022623578763714555),
  np.float64(-0.006539931688758583),
  np.float64(-0.0051683338266191575),
  np.float64(0.03389832441796724),
  np.float64(0.05896055479749102),
  np.float64(0.04696089918263089),
  np.float64(0.017285506352933456),
  np.float64(0.07131803461359634),
  np.float64(0.017285506352933456),
  np.float64(0.07186025454958178),
  np.float64(0.01740581334251027),
  np.float64(-0.01740581334251027),
  np.float64(-0.059706448014741245),
  np.float64(0.047163764257134186),
  np.float64(-0.0347421136735698),
  np.float64(0.031095009499649825),
  np.float64(0.03171364022926996),
  np.float64(-0.03171364022926996),
  np.float64(0.022623339148893747),
  np.float64(-0.022623330424941593),
  np.float64(0.022623339148893747),
  np.float64(0.03228160930110697),
  np.float64(0.03228160930110697),
  np.float64(-0.022623330424941593),
  np.float64(0.009307638184457243),
  np.float64(0.0073408718096297),
  np.float64(-0.0052177875780748),
  np.float64(0.0052177875780748),
  np.float64(0.009307479851932986),
  np.float64(2.924621741312582e-08),
  np.float64(-2.8426236054748453e-07),
  np.float64(-0.022405581510282355),
  np.float64(-2.8426236054748453e-07),
  np.float64(-0.02240600204481271),
  np.float64(0.022405581510282355),
  np.float64(0.022412543405917383),
  np.float64(-3.104426226489299e-07),
  np.float64(-0.022412543405917383),
  np.float64(3.104426226489299e-07),
  np.float64(-0.02240600204481271),
  np.float64(-0.017173239583760026),
  np.float64(0.017173239583760026),
  np.float64(0.017405551570818956),
  np.float64(0.024372768419640253),
  np.float64(-0.024537486717703023),
  np.float64(0.024537486717703023),
  np.float64(0.024372768419640253),
  np.float64(-0.017405551570818956),
  np.float64(-1.390375687273724e-08),
  np.float64(2.3190126375964562e-07),
  np.float64(0.01717326882997744),
  np.float64(-0.024372462363043378),
  np.float64(-0.017173536712887738),
  np.float64(-0.024372462363043378),
  np.float64(-0.01740581334251027),
  np.float64(-0.02453716979078779),
  np.float64(0.02453716979078779),
  np.float64(-2.617312507367102e-07),
  np.float64(0.01740557531923774),
  np.float64(5.2361096787838916e-08),
  np.float64(-0.03171306136221534),
  np.float64(0.022623578763714555),
  np.float64(-0.03171306136221534),
  np.float64(-0.02262322311869503),
  np.float64(-0.022623578763714555),
  np.float64(3.104426226489299e-07),
  np.float64(-0.03228099362952629),
  np.float64(-3.104426226489299e-07),
  np.float64(0.03228099362952629),
  np.float64(-0.02262322311869503),
  np.float64(-0.007340598999171961),
  np.float64(0.001966880852761025),
  np.float64(-0.005217755105703855),
  np.float64(-0.005217765421204284),
  np.float64(-0.03171364022926996),
  np.float64(0.03171364022926996),
  np.float64(-0.022623339148893747),
  np.float64(0.022623330424941593),
  np.float64(-0.022623339148893747),
  np.float64(-0.03228160930110697),
  np.float64(-0.03228160930110697),
  np.float64(0.022623330424941593),
  np.float64(-0.0073408718096297),
  np.float64(-0.009307638184457243),
  np.float64(1.1603019872252064e-07),
  np.float64(-1.1603019872252064e-07),
  np.float64(-0.0019667663748275423),
  np.float64(-0.005217671547876076),
  np.float64(-0.005217671547876076),
  np.float64(-0.001966880852761025),
  np.float64(2.8426236054748453e-07),
  np.float64(0.022405581510282355),
  np.float64(2.8426236054748453e-07),
  np.float64(0.02240600204481271),
  np.float64(-0.022405581510282355),
  np.float64(-0.022412543405917383),
  np.float64(3.104426226489299e-07),
  np.float64(0.022412543405917383),
  np.float64(-3.104426226489299e-07),
  np.float64(0.02240600204481271),
  np.float64(-0.017173239583760026),
  np.float64(0.017173239583760026),
  np.float64(0.017405551570818956),
  np.float64(0.024372768419640253),
  np.float64(-0.024537486717703023),
  np.float64(0.024537486717703023),
  np.float64(0.024372768419640253),
  np.float64(-0.017405551570818956),
  np.float64(-1.390375687273724e-08),
  np.float64(2.3190126375964562e-07),
  np.float64(0.01717326882997744),
  np.float64(-0.024372462363043378),
  np.float64(-0.017173536712887738),
  np.float64(-0.024372462363043378),
  np.float64(-0.01740581334251027),
  np.float64(-0.02453716979078779),
  np.float64(0.02453716979078779),
  np.float64(-2.617312507367102e-07),
  np.float64(0.01740557531923774),
  np.float64(5.2361096787838916e-08),
  np.float64(2.924621741312582e-08),
  np.float64(-0.03171306136221534),
  np.float64(0.022623578763714555),
  np.float64(-0.03171306136221534),
  np.float64(-0.02262322311869503),
  np.float64(-0.022623578763714555),
  np.float64(3.104426226489299e-07),
  np.float64(-0.03228099362952629),
  np.float64(-3.104426226489299e-07),
  np.float64(0.03228099362952629),
  np.float64(-0.02262322311869503),
  np.float64(-0.009307479851932986),
  np.float64(0.005217765421204284),
  np.float64(0.005217755105703855),
  np.float64(0.007340598999171961),
  np.float64(0.0019667663748275423),
  np.float64(0.02808082032435199),
  np.float64(0.05914337855099058),
  np.float64(0.05932611847690525),
  np.float64(-2.6020666785142577e-07),
  np.float64(0.05932575952364629),
  np.float64(-2.6020666785142577e-07),
  np.float64(0.059706448014741245),
  np.float64(-2.617312507367102e-07),
  np.float64(2.617312507367102e-07),
  np.float64(-0.05990560117846802),
  np.float64(0.059706827752910856),
  np.float64(-0.0367308351450732),
  np.float64(0.03478863175920223),
  np.float64(3.003193542808201e-08),
  np.float64(5.02359547975041e-08),
  np.float64(0.03481596137988931),
  np.float64(0.034788589732858505),
  np.float64(-0.005638176175507453),
  np.float64(-0.005168351996037364),
  np.float64(0.017068035245086727),
  np.float64(-0.017068035245086727),
  np.float64(-0.0172852404720167),
  np.float64(-0.024218735693562515),
  np.float64(0.024372768419640253),
  np.float64(-0.024372768419640253),
  np.float64(-0.024218735693562515),
  np.float64(0.0172852404720167),
  np.float64(0.02223627921140772),
  np.float64(0.006539931688758583),
  np.float64(0.02223627921140772),
  np.float64(0.038257888787766606),
  np.float64(-0.006539931688758583),
  np.float64(-0.02240600204481271),
  np.float64(0.02262322311869503),
  np.float64(0.02240600204481271),
  np.float64(-0.02262322311869503),
  np.float64(0.038257888787766606),
  np.float64(-0.022236387241124086),
  np.float64(0.022236387241124086),
  np.float64(-0.015851547795452007),
  np.float64(0.01586587671836003),
  np.float64(-0.015851547795452007),
  np.float64(-0.022623330424941593),
  np.float64(-0.022623330424941593),
  np.float64(0.01586587671836003),
  np.float64(-1.0802971637038914e-07),
  np.float64(-0.005168243966320993),
  np.float64(0.012178107864266038),
  np.float64(-0.012178107864266038),
  np.float64(-0.012347802877244874),
  np.float64(-0.0172852404720167),
  np.float64(0.017405551570818956),
  np.float64(-0.017405551570818956),
  np.float64(-0.0172852404720167),
  np.float64(0.012347802877244874),
  np.float64(-0.0036734399311859713),
  np.float64(-0.009311616106693427),
  np.float64(0.033898031735096076),
  np.float64(0.058960891154479604),
  np.float64(0.07131767853025152),
  np.float64(-0.017285270503952125),
  np.float64(0.0469608905364302),
  np.float64(-0.017285270503952125),
  np.float64(0.047163764257134186),
  np.float64(-0.01740557531923774),
  np.float64(0.01740557531923774),
  np.float64(-0.059706827752910856),
  np.float64(0.07185993324254746),
  np.float64(-0.03474215546091709),
  np.float64(0.03305978974248493),
  np.float64(-5.02359547975041e-08),
  np.float64(-3.003193542808201e-08),
  np.float64(0.02742545438521495),
  np.float64(0.031095013818070172)],
 ['IIIIIIIIII',
  'IIIIIIIIIZ',
  'IIIIIIIIZI',
  'IIIIIIIIZZ',
  'IIIIIIIXYY',
  'IIIIIIIYXY',
  'IIIIIIIYYX',
  'IIIIIIIZIZ',
  'IIIIIIIZZI',
  'IIIIIIIZZZ',
  'IIIIIIXIXI',
  'IIIIIIXZXZ',
  'IIIIIIYIYI',
  'IIIIIIYXIY',
  'IIIIIIYYIX',
  'IIIIIIYYZX',
  'IIIIIIZIII',
  'IIIIIIZIZI',
  'IIIIIIZXXX',
  'IIIIIIZXYY',
  'IIIIIIZYYX',
  'IIIIIIZZII',
  'IIIIIIZZIZ',
  'IIIIIIZZZZ',
  'IIIIIXIIIX',
  'IIIIIXIIZX',
  'IIIIIXIXXZ',
  'IIIIIXIYYI',
  'IIIIIXXIXX',
  'IIIIIXXXIZ',
  'IIIIIXXXZI',
  'IIIIIXXXZZ',
  'IIIIIXXZYY',
  'IIIIIXYIYX',
  'IIIIIXYYII',
  'IIIIIXYYZI',
  'IIIIIXZIIX',
  'IIIIIXZIZX',
  'IIIIIXZXXZ',
  'IIIIIXZYYI',
  'IIIIIYIIIY',
  'IIIIIYIXYI',
  'IIIIIYIYXZ',
  'IIIIIYXIXY',
  'IIIIIYXYII',
  'IIIIIYXYIZ',
  'IIIIIYXYZZ',
  'IIIIIYYIYY',
  'IIIIIYYXII',
  'IIIIIYYXZI',
  'IIIIIYYZXX',
  'IIIIIYZIZY',
  'IIIIIZIIII',
  'IIIIIZIIIZ',
  'IIIIIZIIZZ',
  'IIIIIZIXXX',
  'IIIIIZIYXY',
  'IIIIIZIZII',
  'IIIIIZIZZI',
  'IIIIIZXIXZ',
  'IIIIIZXXIX',
  'IIIIIZXXZX',
  'IIIIIZXYIY',
  'IIIIIZXZXI',
  'IIIIIZYIYZ',
  'IIIIIZZIII',
  'IIIIIZZIIZ',
  'IIIIIZZIZZ',
  'IIIIIZZXXX',
  'IIIIIZZYXY',
  'IIIIIZZZII',
  'IIIIIZZZZI',
  'IIIIXIIIIX',
  'IIIIXIIIZX',
  'IIIIXIIYYI',
  'IIIIXIYYII',
  'IIIIXIZXXZ',
  'IIIIXXIIII',
  'IIIIXXZIII',
  'IIIIXZXXZI',
  'IIIIZIIIII',
  'IIIIZIIIIZ',
  'IIIIZIIIZZ',
  'IIIIZIIYXY',
  'IIIIZIIZZI',
  'IIIIZIZXXX',
  'IIIIZIZZII',
  'IIIIZXXXZI',
  'IIIIZYXYII',
  'IIIIZZIIII',
  'IIIIZZZIII',
  'IIIXIIIIXI',
  'IIIXIIIZXZ',
  'IIIXIIXIII',
  'IIIXIIYXXY',
  'IIIXIXXXXZ',
  'IIIXIYXXYI',
  'IIIXIZXXXX',
  'IIIXIZXZII',
  'IIIYYIIIYY',
  'IIIYYIIXII',
  'IIIYYIIZXX',
  'IIIYYIYXYI',
  'IIIYYIZXZI',
  'IIIYYXXXXX',
  'IIIYYXXZII',
  'IIIYYYXXXY',
  'IIIYYYYIII',
  'IIIYYZXXXZ',
  'IIIZIIIIII',
  'IIIZXIIIIX',
  'IIIZXIIIZX',
  'IIIZXIIYYI',
  'IIIZXIYYII',
  'IIIZXIZXXZ',
  'IIIZXXIIII',
  'IIIZXXZIII',
  'IIIZXZXXZI',
  'IIIZZIIIII',
  'IIIZZIIIIZ',
  'IIIZZIIIZZ',
  'IIIZZIIYXY',
  'IIIZZIIZZI',
  'IIIZZIZXXX',
  'IIIZZIZZII',
  'IIIZZXXXZI',
  'IIIZZYXYII',
  'IIIZZZIIII',
  'IIIZZZZIII',
  'IIXIIIIIYY',
  'IIXIIIIXII',
  'IIXIIIIZXX',
  'IIXIIIYXYI',
  'IIXIIIZXZI',
  'IIXIIXXXXX',
  'IIXIIXXZII',
  'IIXIIYXXXY',
  'IIXIIYYIII',
  'IIXIIZXXXZ',
  'IIXYYIIIII',
  'IIYXYIIIII',
  'IIYXYIIIIZ',
  'IIYXYIIIZZ',
  'IIYXYIIYXY',
  'IIYXYIIZZI',
  'IIYXYIZXXX',
  'IIYXYIZZII',
  'IIYXYXXXZI',
  'IIYXYYXYII',
  'IIYXYZIIII',
  'IIYXYZZIII',
  'IIYYIIIIIX',
  'IIYYIIIIZX',
  'IIYYIIIYYI',
  'IIYYIIYYII',
  'IIYYIIZXXZ',
  'IIYYIXIIII',
  'IIYYIXZIII',
  'IIYYIZXXZI',
  'IIYYXIIIII',
  'IIZIZIIIII',
  'IIZXXIIIYY',
  'IIZXXIIXII',
  'IIZXXIIZXX',
  'IIZXXIYXYI',
  'IIZXXIZXZI',
  'IIZXXXXXXX',
  'IIZXXXXZII',
  'IIZXXYXXXY',
  'IIZXXYYIII',
  'IIZXXZXXXZ',
  'IIZXZIIIXI',
  'IIZXZIIZXZ',
  'IIZXZIXIII',
  'IIZXZIYXXY',
  'IIZXZXXXXZ',
  'IIZXZYXXYI',
  'IIZXZZXXXX',
  'IIZXZZXZII',
  'IIZZIIIIII',
  'IIZZIIIIIZ',
  'IIZZIIIIZZ',
  'IIZZIIIYXY',
  'IIZZIIIZZI',
  'IIZZIIZXXX',
  'IIZZIIZZII',
  'IIZZIXXXZI',
  'IIZZIYXYII',
  'IIZZIZIIII',
  'IIZZIZZIII',
  'IIZZZIIIII',
  'IXIIIIIIXI',
  'IXIIIIIZXZ',
  'IXIIIIXIII',
  'IXIIIIYXXY',
  'IXIIIXXXXZ',
  'IXIIIYXXYI',
  'IXIIIZXXXX',
  'IXIIIZXZII',
  'IXIXIIIIII',
  'IXZXZIIIII',
  'IYIYIIIIII',
  'IYXIYIIIII',
  'IYXXYIIIXI',
  'IYXXYIIZXZ',
  'IYXXYIXIII',
  'IYXXYIYXXY',
  'IYXXYXXXXZ',
  'IYXXYYXXYI',
  'IYXXYZXXXX',
  'IYXXYZXZII',
  'IYXYIIIIYY',
  'IYXYIIIXII',
  'IYXYIIIZXX',
  'IYXYIIYXYI',
  'IYXYIIZXZI',
  'IYXYIXXXXX',
  'IYXYIXXZII',
  'IYXYIYXXXY',
  'IYXYIYYIII',
  'IYXYIZXXXZ',
  'IYYIIIIIIX',
  'IYYIIIIIZX',
  'IYYIIIIYYI',
  'IYYIIIYYII',
  'IYYIIIZXXZ',
  'IYYIIXIIII',
  'IYYIIXZIII',
  'IYYIIZXXZI',
  'IYYIXIIIII',
  'IYYZXIIIII',
  'IZIIIIIIII',
  'IZIZIIIIII',
  'IZXXXIIIII',
  'IZXXXIIIIZ',
  'IZXXXIIIZZ',
  'IZXXXIIYXY',
  'IZXXXIIZZI',
  'IZXXXIZXXX',
  'IZXXXIZZII',
  'IZXXXXXXZI',
  'IZXXXYXYII',
  'IZXXXZIIII',
  'IZXXXZZIII',
  'IZXXZIIIIX',
  'IZXXZIIIZX',
  'IZXXZIIYYI',
  'IZXXZIYYII',
  'IZXXZIZXXZ',
  'IZXXZXIIII',
  'IZXXZXZIII',
  'IZXXZZXXZI',
  'IZXYYIIIII',
  'IZXZIIIIYY',
  'IZXZIIIXII',
  'IZXZIIIZXX',
  'IZXZIIYXYI',
  'IZXZIIZXZI',
  'IZXZIXXXXX',
  'IZXZIXXZII',
  'IZXZIYXXXY',
  'IZXZIYYIII',
  'IZXZIZXXXZ',
  'IZYYXIIIII',
  'IZZIIIIIII',
  'IZZIIIIIIZ',
  'IZZIIIIIZZ',
  'IZZIIIIYXY',
  'IZZIIIIZZI',
  'IZZIIIZXXX',
  'IZZIIIZZII',
  'IZZIIXXXZI',
  'IZZIIYXYII',
  'IZZIIZIIII',
  'IZZIIZZIII',
  'IZZIZIIIII',
  'IZZZZIIIII',
  'XIIIIIIIIX',
  'XIIIIIIIZX',
  'XIIIIIIYYI',
  'XIIIIIYYII',
  'XIIIIIZXXZ',
  'XIIIIXIIII',
  'XIIIIXZIII',
  'XIIIIZXXZI',
  'XIIIXIIIII',
  'XIIZXIIIII',
  'XIXXZIIIII',
  'XIYYIIIIII',
  'XXIXXIIIII',
  'XXXIZIIIII',
  'XXXXXIIIYY',
  'XXXXXIIXII',
  'XXXXXIIZXX',
  'XXXXXIYXYI',
  'XXXXXIZXZI',
  'XXXXXXXXXX',
  'XXXXXXXZII',
  'XXXXXYXXXY',
  'XXXXXYYIII',
  'XXXXXZXXXZ',
  'XXXXZIIIXI',
  'XXXXZIIZXZ',
  'XXXXZIXIII',
  'XXXXZIYXXY',
  'XXXXZXXXXZ',
  'XXXXZYXXYI',
  'XXXXZZXXXX',
  'XXXXZZXZII',
  'XXXZIIIIII',
  'XXXZIIIIIZ',
  'XXXZIIIIZZ',
  'XXXZIIIYXY',
  'XXXZIIIZZI',
  'XXXZIIZXXX',
  'XXXZIIZZII',
  'XXXZIXXXZI',
  'XXXZIYXYII',
  'XXXZIZIIII',
  'XXXZIZZIII',
  'XXXZZIIIII',
  'XXZIIIIIYY',
  'XXZIIIIXII',
  'XXZIIIIZXX',
  'XXZIIIYXYI',
  'XXZIIIZXZI',
  'XXZIIXXXXX',
  'XXZIIXXZII',
  'XXZIIYXXXY',
  'XXZIIYYIII',
  'XXZIIZXXXZ',
  'XXZYYIIIII',
  'XYIYXIIIII',
  'XYYIIIIIII',
  'XYYZIIIIII',
  'XZIIIIIIIX',
  'XZIIIIIIZX',
  'XZIIIIIYYI',
  'XZIIIIYYII',
  'XZIIIIZXXZ',
  'XZIIIXIIII',
  'XZIIIXZIII',
  'XZIIIZXXZI',
  'XZIIXIIIII',
  'XZIZXIIIII',
  'XZXXZIIIII',
  'XZYYIIIIII',
  'YIIIYIIIII',
  'YIXYIIIIII',
  'YIYXZIIIII',
  'YXIXYIIIII',
  'YXXXYIIIYY',
  'YXXXYIIXII',
  'YXXXYIIZXX',
  'YXXXYIYXYI',
  'YXXXYIZXZI',
  'YXXXYXXXXX',
  'YXXXYXXZII',
  'YXXXYYXXXY',
  'YXXXYYYIII',
  'YXXXYZXXXZ',
  'YXXYIIIIXI',
  'YXXYIIIZXZ',
  'YXXYIIXIII',
  'YXXYIIYXXY',
  'YXXYIXXXXZ',
  'YXXYIYXXYI',
  'YXXYIZXXXX',
  'YXXYIZXZII',
  'YXYIIIIIII',
  'YXYIIIIIIZ',
  'YXYIIIIIZZ',
  'YXYIIIIYXY',
  'YXYIIIIZZI',
  'YXYIIIZXXX',
  'YXYIIIZZII',
  'YXYIIXXXZI',
  'YXYIIYXYII',
  'YXYIIZIIII',
  'YXYIIZZIII',
  'YXYIZIIIII',
  'YXYZZIIIII',
  'YYIIIIIIYY',
  'YYIIIIIXII',
  'YYIIIIIZXX',
  'YYIIIIYXYI',
  'YYIIIIZXZI',
  'YYIIIXXXXX',
  'YYIIIXXZII',
  'YYIIIYXXXY',
  'YYIIIYYIII',
  'YYIIIZXXXZ',
  'YYIYYIIIII',
  'YYXIIIIIII',
  'YYXZIIIIII',
  'YYZXXIIIII',
  'YZIZYIIIII',
  'ZIIIIIIIII',
  'ZIIIIIIIIZ',
  'ZIIIIIIIZZ',
  'ZIIIIIIYXY',
  'ZIIIIIIZZI',
  'ZIIIIIZXXX',
  'ZIIIIIZZII',
  'ZIIIIXXXZI',
  'ZIIIIYXYII',
  'ZIIIIZIIII',
  'ZIIIIZZIII',
  'ZIIIZIIIII',
  'ZIIZZIIIII',
  'ZIXXXIIIII',
  'ZIYXYIIIII',
  'ZIZIIIIIII',
  'ZIZZIIIIII',
  'ZXIXZIIIII',
  'ZXXIXIIIII',
  'ZXXXXIIIXI',
  'ZXXXXIIZXZ',
  'ZXXXXIXIII',
  'ZXXXXIYXXY',
  'ZXXXXXXXXZ',
  'ZXXXXYXXYI',
  'ZXXXXZXXXX',
  'ZXXXXZXZII',
  'ZXXXZIIIYY',
  'ZXXXZIIXII',
  'ZXXXZIIZXX',
  'ZXXXZIYXYI',
  'ZXXXZIZXZI',
  'ZXXXZXXXXX',
  'ZXXXZXXZII',
  'ZXXXZYXXXY',
  'ZXXXZYYIII',
  'ZXXXZZXXXZ',
  'ZXXZIIIIIX',
  'ZXXZIIIIZX',
  'ZXXZIIIYYI',
  'ZXXZIIYYII',
  'ZXXZIIZXXZ',
  'ZXXZIXIIII',
  'ZXXZIXZIII',
  'ZXXZIZXXZI',
  'ZXXZXIIIII',
  'ZXYIYIIIII',
  'ZXZIIIIIXI',
  'ZXZIIIIZXZ',
  'ZXZIIIXIII',
  'ZXZIIIYXXY',
  'ZXZIIXXXXZ',
  'ZXZIIYXXYI',
  'ZXZIIZXXXX',
  'ZXZIIZXZII',
  'ZXZXIIIIII',
  'ZYIYZIIIII',
  'ZZIIIIIIII',
  'ZZIIIIIIIZ',
  'ZZIIIIIIZZ',
  'ZZIIIIIYXY',
  'ZZIIIIIZZI',
  'ZZIIIIZXXX',
  'ZZIIIIZZII',
  'ZZIIIXXXZI',
  'ZZIIIYXYII',
  'ZZIIIZIIII',
  'ZZIIIZZIII',
  'ZZIIZIIIII',
  'ZZIZZIIIII',
  'ZZXXXIIIII',
  'ZZYXYIIIII',
  'ZZZIIIIIII',
  'ZZZZIIIIII'])
    print(len(data_train))
    begin1=timer()
    for i in range(number_of_cpus):
        p = multiprocessing.Process(target=parallel_sample_hm, args=(i,100,data_train,target_train,observable,params,qubit_num,2,"D:\\QML\\QML_Cliiford\\100qubits\\"))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()
    
    end1=timer()
    

    print(end1-begin1)
